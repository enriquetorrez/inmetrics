@page "/Transactions"
@inject ITransactionRepository _transactionRepo;
@using InMetrics.Challenge.UI.Modals

<h3>Transactions</h3> 

@if (_transactions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-outline-success"  @onclick="() => ModalCreate(true)">Add credit</button>
    <button class="btn btn-outline-danger"  @onclick="() => ModalCreate(false)">Add Debit</button>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Amount</th>
                <th>Entries</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in _transactions)
            {
                
                <tr>
                    <td>@transaction.Creation.ToShortDateString()</td>
                    <td>@transaction.Amount</td>
                    <td>@(transaction.IsAddition?CreditLabel:DebitLabel)</td>
                    <td>
                        <button class="btn btn-outline-dark" @onclick="() => ModalDelete(transaction.TransactionId.ToString())">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    MarkupString CreditLabel =new MarkupString("<span class=\"badge bg-success\">Credit</span>") ;
    MarkupString DebitLabel = new MarkupString("<span class=\"badge bg-danger\">Debit</span>");

    [CascadingParameter] public IModalService Modal { get; set; }
    private IList<Transaction> _transactions;
    private Transaction _transaction;
    #region on initialized
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            _transactions = await _transactionRepo.Get(Endpoints.EndPoint.Transaction);            
            StateHasChanged();
        }
    }
    #endregion
    #region Modals
    public async void ModalCreate(bool IsAddition)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(IsAddition), IsAddition);
        var transactionModal = Modal.Show<ModalTransaction>("Creating new register: ",parameters);
        var result = await transactionModal.Result;
        _transaction = (Transaction) result.Data;
        await _transactionRepo.Create(Endpoints.EndPoint.Transaction, _transaction);
        _transactions = await _transactionRepo.Get(Endpoints.EndPoint.Transaction); 
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
    }
    public async void ModalDelete(string TransactionId)
    {

        var parameters = new ModalParameters();
        var usersModal = Modal.Show<ModalForDelete>("Removing register: ");
        var result = await usersModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            await _transactionRepo.Delete(Endpoints.EndPoint.Transaction, TransactionId);
            _transactions = await _transactionRepo.Get(Endpoints.EndPoint.Transaction); 
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
    }
    #endregion
}
